openapi: 3.0.0
info:
  description: API documentation for the Track the Thing, a simple application to enable long distance bike races to
    better manage GPS tracker stock. <br>
    It has been developed by Oli M-C and Ben Kirby to support races held by Lost Dot.
  version: 0.0.1
  title: Track the thing
  contact:
    email: hello@olimc.co.uk
  #license: #todo Research and add license
    #name: "TBA"
    #url: ""
#host: "TBA"
#basePath: "TBA"
#externalDocs:
#  description:
#  url:
tags:
- name: riders
  description: Operations concerning riders
- name: trackers
  description: Operations concerning trackers
- name: races
  description: Operations concernng races
paths:
  /riders:
    post:
      tags:
      - riders
      summary: Add a new rider
      operationId: tracker.webserver.post_riders
      requestBody:
        description: Basic rider details to add
        required: True
        content:
          application/json:
            schema:
              type:
                object
              properties:
                firstName:
                  $ref: '#/components/schemas/FirstName'
                lastName:
                  $ref: '#/components/schemas/LastName'
                email:
                  $ref: '#/components/schemas/Email'
                capNumber:
                  $ref: '#/components/schemas/CapNumber'
                category:
                  $ref: '#/components/schemas/Category'
                notes:
                  $ref: '#/components/schemas/notes'
      responses:
        200:
          description: Basic rider details
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  firstName:
                    $ref: '#/components/schemas/FirstName'
                  lastName:
                    $ref: '#/components/schemas/LastName'
                  email:
                    $ref: '#/components/schemas/Email'
                  category:
                    $ref: '#/components/schemas/Category'
                  notes:
                    $ref: '#/components/schemas/notes'
    get:
      tags:
        - riders
      summary: Get a list of riders
      operationId: tracker.webserver.get_riders
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/IdStart'
      responses:
        200:
          description: List of riders
          content:
            application/json:
              schema:
                type: object
                properties:
                  next:
                    $ref: '#/components/schemas/Next'
                  riders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/Id'
                        firstName:
                          $ref: '#/components/schemas/FirstName'
                        lastName:
                          $ref: '#/components/schemas/LastName'
                        email:
                          $ref: '#/components/schemas/Email'
                        category:
                          $ref: '#/components/schemas/Category'
                        capNumber:
                          $ref: '#/components/schemas/CapNumber'
                        depositBalance:
                          $ref: '#/components/schemas/DepositBalance'
                        trackers:
                          $ref: '#/components/schemas/RiderTrackerList'
                        checkpoints:
                          $ref: '#/components/schemas/CheckpointList'
                        events:
                          $ref: '#/components/schemas/RiderEvents'
  /riders/{rider_id}:
    get:
      operationId: tracker.webserver.get_rider
      tags:
        - riders
      summary: Retrive information about one rider
      parameters:
        - $ref: '#/components/parameters/RiderId'
      responses:
        200:
          description: Rider response
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  firstName:
                    $ref: '#/components/schemas/FirstName'
                  lastName:
                    $ref: '#/components/schemas/LastName'
                  email:
                    $ref: '#/components/schemas/Email'
                  category:
                    $ref: '#/components/schemas/Category'
                  capNumber:
                    $ref: '#/components/schemas/CapNumber'
                  trackers:
                    type: array
                    items:
                      type: object
                      properties:
                        esnNumber:
                          $ref: '#/components/schemas/ESNNumber'
                        id:
                          $ref: '#/components/schemas/Id'
                        workingStatus:
                          $ref: '#/components/schemas/WorkingStatus'
                        assigned:
                          $ref: '#/components/schemas/trackerBool'
                        possession:
                          $ref: '#/components/schemas/trackerBool'
                        dateAssigned:
                          $ref: '#/components/schemas/dateTime'
                  depositBalance:
                    $ref: '#/components/schemas/DepositBalance'
                  checkpoints:
                    $ref: '#/components/schemas/CheckpointList'
                  events:
                    $ref: '#/components/schemas/RiderEvents'
                  notes:
                    $ref: '#/components/schemas/notes'
    patch:
      operationId: tracker.webserver.patch_rider
      tags:
        - riders
      summary: Change basic information about a rider
      parameters:
        - $ref: '#/components/parameters/RiderId'
      requestBody:
        description: Change information about one rider
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  $ref: '#/components/schemas/FirstName'
                lastName:
                  $ref: '#/components/schemas/LastName'
                email:
                  $ref: '#/components/schemas/Email'
                capNumber:
                  $ref: '#/components/schemas/CapNumber'
                category:
                  $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Updated information about rider
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  firstName:
                    $ref: '#/components/schemas/FirstName'
                  lastName:
                    $ref: '#/components/schemas/LastName'
                  email:
                    $ref: '#/components/schemas/Email'
                  category:
                    $ref: '#/components/schemas/Category'
  /riders/{rider_id}/trackers/{tracker_id}/trackerAssignment:
    post:
      parameters:
        - $ref: '#/components/parameters/RiderId'
        - $ref: '#/components/parameters/TrackerId'
      tags:
        - riders
        - trackers
      summary: Assign a tracker to a rider
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                deposit:
                  $ref: '#/components/schemas/DepositAmount'
                notes:
                  $ref: '#/components/schemas/notes'
      responses:
        200:
          description: Rider object, showing all trackers assigned to rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderTrackers'
        # error tracker already assigned to someone else?
        #
    delete:
      parameters:
        - $ref: '#/components/parameters/RiderId'
        - $ref: '#/components/parameters/TrackerId'
      tags:
        - riders
        - trackers
      summary: Remove a tracker assignment from a rider
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                deposit:
                  $ref: '#/components/schemas/DepositAmount'
                workingStatus:
                  $ref: '#/components/schemas/'
                notes:
                  $ref: '#/components/schemas/notes'
      responses:
        200:
          description: Rider object, showing all trackers assigned to rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderTrackers'
        # error tracker not assigned to rider?
  /riders/{rider_id}/trackers/{tracker_id}/trackerPossession:
    post:
      parameters:
        - $ref: '#/components/parameters/RiderId'
        - $ref: '#/components/parameters/TrackerId'
      tags:
        - riders
        - trackers
      summary: Give rider possession of a tracker
      requestBody:
        required: False
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  $ref: '#/components/schemas/notes'
      responses:
        200:
          description: Rider object, showing all trackers assigned and possessed by rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderTrackers'
        # error tracker already not assigned to rider?
    delete:
      parameters:
        - $ref: '#/components/parameters/RiderId'
        - $ref: '#/components/parameters/TrackerId'
      tags:
        - riders
        - trackers
      summary: Remove a tracker possession from a rider
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                newLocation:
                  $ref: '#/components/schemas/location'
                notes:
                  $ref: '#/components/schemas/notes'
      responses:
        200:
          description: Rider object, showing all trackers assigned to rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderTrackers'
  /riders/{rider_id}/{checkpoint_id}/arrival:
    post:
      parameters:
        - $ref: '#/components/parameters/RiderId'
        - $ref: '#/components/parameters/CheckpointID'
      tags:
        - riders
        - races
      summary: Assign arrival of a rider to a checkpoint
      requestBody:
        required: false
        description: Optional datetime, otherwise datetime calculated by server at request time
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dateTime'
      responses:
        200:
          description: Successfully assigned rider to checkpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointList'
#  /races/{checkpoint_id}:
#    parameters:
#      - $ref: '#/components/parameters/CheckpointID'
#    get:
#      tags:
#        - races
#      description: See a list of riders who have passed through a checkpoint
#      responses:
#        200:
#          schema:
#            $ref: '#/components/schemas/RiderList'
#    post:
#      tags:
#        - races
#      description: Add a new checkpoint
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#todo'
#      responses:
#        200:
#          schema:
#            $ref: #todo
  /trackers:
    post:
      operationId: tracker.webserver.post_trackers
      tags:
        - trackers
      summary: Add a new tracker
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPatchTracker'
      responses:
        200:
          description: Tracker added to db successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
    get:
      operationId: tracker.webserver.get_trackers
      tags:
        - trackers
      summary: Return a list of trackers
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/IdStart'
      responses:
        200:
          description: All trackers requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trackers'
  /trackers/{tracker_id}:
    parameters:
      - $ref: '#/components/parameters/TrackerId'
    get:
      operationId: tracker.webserver.get_tracker
      tags:
        - trackers
      summary: Retrive information about a tracker
      responses:
        200:
          description: Data regarding requested tracker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
    patch:
      operationId: tracker.webserver.patch_tracker
      tags:
        - trackers
      summary: Patch information about a tracker
      requestBody:
        description: Change information about one tracker
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPatchTracker'
      responses:
        200:
          description: Data regarding requested tracker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
components:
  parameters:
    TrackerId:
      name: tracker_id
      in: path
      description: Tracker Id
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    IdStart:
      name: start
      in: query
      description: Id number to start response from
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    Limit:
      name: limit
      in: query
      description: Limit the number of responses to return
      required: false
      schema:
        $ref: '#/components/schemas/LimitParam'
    CheckpointID:
      name: checkpoint_id
      in: path
      description: Checkpoint ID
      required: true
      schema:
        $ref: '#/components/schemas/Checkpoint'
    RiderId:
      name: rider_id
      in: path
      description: Rider ID
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  schemas:
    RiderId:
      type: integer
      description: Id number of rider
    Trackers:
      type: object
      properties:
        trackers:
          $ref: '#/components/schemas/TrackerList'
        next:
          $ref: '#/components/schemas/Next'
    TrackerList:
      type: array
      items:
        $ref: '#/components/schemas/Tracker'
    PostPatchTracker:
      type: object
      properties:
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
        lastTestDate:
          $ref: '#/components/schemas/date'
        purchaseDate:
          $ref: '#/components/schemas/date'
        warrantyExpiry:
          $ref: '#/components/schemas/date'
        owner:
          $ref: '#/components/schemas/Owner'
        url:
          $ref: '#/components/schemas/trackerUrl'
    notes:
      type: string
      description: Notes for an action
    Tracker:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
        depositAmount:
          $ref: '#/components/schemas/DepositAmount'
        lastTestDate:
          $ref: '#/components/schemas/date'
        purchaseDate:
          $ref: '#/components/schemas/date'
        warrantyExpiry:
          $ref: '#/components/schemas/date'
        owner:
          $ref: '#/components/schemas/Owner'
        url:
          $ref: '#/components/schemas/trackerUrl'
        riderAssignment:
          $ref: '#/components/schemas/trackerRider'
        possession:
          $ref: '#/components/schemas/Possession'
        events:
          $ref: '#/components/schemas/TrackerEvents'
        notes:
          $ref: '#/components/schemas/Notes'
    TrackerEvents:
      type: object
      properties:
        classification:
          $ref: '#/components/schemas/TrackerEventClassification'
        user:
          $ref: '#/components/schemas/EventUser'
        dateTime:
          $ref: '#/components/schemas/dateTime'
        notes:
          $ref: '#/components/schemas/Notes'
    TrackerEventClassification:
      type: string
      enum:
        - tracker_tested
        - tracker_assignment_to_rider
        - tracker_assignment_remove
        - tracker_possession_to_rider
        - tracker_possesion_from_rider
    Possession:
      type: string
      enum:
        - lost_dot
        - rider
        - lost
    trackerRider:
      description: Short description of rider that tracker is assigned to
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RiderId'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
    trackerUrl:
      description: Spot URL for the tracker
      type: string
      example: www.bbc.co.uk
    Owner:
      type: string
      enum:
        - lostDot
        - riderOwned
        - thirdParty
    LimitParam:
      type: integer
      example: 5
    PatchRider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
        category:
          $ref: '#/components/schemas/Category'
    CapNumber:
      type: integer
      description: Cap number of rider
      example: 171
    Category:
      type: string
      enum:
        - male
        - female
        - pair
    PostRider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
        category:
          $ref: '#/components/schemas/Category'
    PostPatchRiderResponse:
      type:
        object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        category:
          $ref: '#/components/schemas/Category'
    Riders:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/Next'
        riders:
          $ref: '#/components/schemas/RiderList'
    Next:
      type: string
      description: URL for next response, with same number of objects as current response
      example: '/riders?id=51&limit=50'
    RiderList:
      type: array
      items:
        $ref: '#/components/schemas/Rider'
    Rider:
      type:
        object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        category:
          $ref: '#/components/schemas/Category'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
        trackers:
          $ref: '#/components/schemas/RiderTrackerList'
        depositBalance:
          $ref: '#/components/schemas/DepositBalance'
        checkpoints:
          $ref: '#/components/schemas/CheckpointList'
        events:
          $ref: '#/components/schemas/RiderEvents'
    RiderEvents:
      type: array
      items:
        $ref: '#/components/schemas/RiderEvent'
    RiderEvent:
      type: object
      properties:
        classification:
          $ref: '#/components/schemas/RiderEventClassification'
        user:
          $ref: '#/components/schemas/EventUser'
        timestamp:
          $ref: '#/components/schemas/dateTime'
        notes:
          $ref: '#/components/schemas/Notes'
    Notes:
      type: string
      description: A place to store notes
    RiderEventClassification:
      type: string
      enum:
        - paymentIn
        - paymentOut
        - startRace
        - finishRace
    EventUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
    CheckpointList:
      type: array
      items:
        $ref: '#/components/schemas/CheckpointSeen'
    CheckpointArrival:
      type: object
      properties:
        checkPoint:
          $ref: '#/components/schemas/Checkpoint'
        time:
          $ref: '#/components/schemas/dateTime'
    CheckpointSeen:
      type: object
      properties:
        checkPoint:
          $ref: '#/components/schemas/Checkpoint'
        timeSeen:
          $ref: '#/components/schemas/dateTime'
    Checkpoint:
      type: integer
      example: 1
    RiderTrackers:
      type: object
      properties:
        trackers:
          $ref: '#/components/schemas/RiderTrackerList'
        depositBalance:
          $ref: '#/components/schemas/DepositAmount'
    RiderTrackerList:
      type: array
      items:
        $ref: '#/components/schemas/RiderTracker'
    RiderTracker:
      type: object
      properties:
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        id:
          $ref: '#/components/schemas/Id'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
        assigned:
          $ref: '#/components/schemas/trackerBool'
        possession:
          $ref: '#/components/schemas/trackerBool'
        dateAssigned:
          $ref: '#/components/schemas/dateTime'
    trackerBool:
      type: boolean
      description: Whether the rider is in possession or tracker is assigned to rider
    Id:
      type: integer
      description: Id number for various resources. Starting from 0, +1 iteration
      example: 142
    ESNNumber:
      type: string
      example: 123456789
    DepositBalance:
      description: Current deposit balance
      type: number
      example: 200.4
    DepositAmount:
      description: Money. Either total balance, or amount to be added or removed
        from a riders account
      type: number
      example: 200.4
    WorkingStatus:
      type: string
      enum:
        - working
        - broken
        - unknown
    dateTime:
      type: string
      format: date-time
      description: ISO Format Date Time string
      example: '2018-01-03T23:00:15'
    date:
      type: string
      format: date
      description: ISO format date string
      example: '2018-01-01'
    FirstName:
      type: string
      description: First name of rider or user
      example: Graham
    LastName:
      type: string
      description: Last name of rider or user
      example: Dodds
    Email:
      type: string
      format: email
      example: hello@email.com

