openapi: 3.0.0
info:
  description: API documentation for the Track the Thing, a simple application to enable long distance bike races to
    better manage GPS tracker stock. <br>
    It has been developed by Oli M-C and Ben Kirby to support races held by Lost Dot.
  version: 0.0.1
  title: Track the thing
  contact:
    email: hello@olimc.co.uk
  #license: #todo Research and add license
    #name: "TBA"
    #url: ""
#host: "TBA"
#basePath: "TBA"
#externalDocs:
#  description:
#  url:
tags:
- name: riders
  description: Operations concerning riders
- name: trackers
  description: Operations concerning trackers
- name: races
  description: Operations concernng races
paths:
  /riders:
    post:
      tags:
      - riders
      summary: Add a new rider
      description:
      operationId: addRider
      requestBody:
        description: Basic rider details to add
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRider'
      responses:
        200:
          description: Basic rider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPatchRiderResponse'
    get:
      tags:
        - riders
      summary: Get a list of riders
      operationId: getRiderList
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/IdStart'
      responses:
        200:
          description: List of riders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Riders'
  /riders/{rider_id}:
    get:
      tags:
        - riders
      summary: Retrive information about one rider
      parameters:
        - $ref: '#/components/parameters/RiderId'
      responses:
        200:
          description: Rider response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rider'
    patch:
      tags:
        - riders
      summary: Change basic information about a rider
      operationId: patchRider
      parameters:
        - $ref: '#/components/parameters/RiderId'
      requestBody:
        description: Change information about one rider
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRider'
      responses:
        200:
          description: Updated information about rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPatchRiderResponse'
  /riders/{rider_id}/assignTracker:
    post:
      parameters:
        - $ref: '#/components/parameters/RiderId'
      tags:
        - riders
        - trackers
      summary: Assign a tracker to a rider
      operationId: addTrackerToRider
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTracker'
      responses:
        200:
          description: List of trackers currently assigned to rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderTrackerList'
        # error tracker already assigned to someone else?
        #
  /riders/{rider_id}/removeTracker:
    post:
      parameters:
        - $ref: '#/components/parameters/RiderId'
      tags:
        - riders
        - trackers
      summary: Remove a tracker from a rider
      operationId: removeTrackerFromRider
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTracker'
      responses:
        200:
          description: List of trackers currently assigned to rider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderTrackerList'
        # error tracker not assigned to rider
  /riders/{rider_id}/{checkpoint_id}/assignArrival:
    post:
      parameters:
        - $ref: '#/components/parameters/RiderId'
        - $ref: '#/components/parameters/CheckpointID'
      tags:
        - riders
        - races
      summary: Assign arrival of a rider to a checkpoint
      operationId: assignArrivalOfRider
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckpointArrival'
      responses:
        200:
          description: Successfully assigned rider to checkpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointList'
  /races/{checkpoint_id}:
    parameters:
      - $ref: '#/components/parameters/CheckpointID'
    get:
      tags:
        - races
      description: See a list of riders who have passed through a checkpoint
      responses:
        200:
          schema:
            $ref: '#/components/schemas/RiderList'
    post:
      tags:
        - races
      description: Add a new checkpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#todo'
      responses:
        200:
          schema:
            $ref: #todo
  /trackers:
    post:
      tags:
        - trackers
      summary: Add a new tracker
      operationId: addNewTracker
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTracker'
      responses:
        200:
          description: Tracker added to db successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
    get:
      tags:
        - trackers
      summary: Return a list of trackers
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/IdStart'
      responses:
        200:
          description: All trackers requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trackers'
  /trackers/{tracker_id}:
    parameters:
      - $ref: '#/components/parameters/TrackerId'
    get:
      tags:
        - trackers
      summary: Retrive information about a tracker
      operationId: getTracker
      responses:
        200:
          description: Data regarding requested tracker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
    patch:
      tags:
        - trackers
      summary: Patch information about a tracker
      operationId: getTracker
      requestBody:
        description: Change information about one tracker
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tracker'
      responses:
        200:
          description: Data regarding requested tracker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
components:
  parameters:
    TrackerId:
      name: tracker_id
      in: query
      description: Tracker Id
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    IdStart:
      name: id
      in: query
      description: Id number to start response from
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    Limit:
      name: limit
      in: query
      description: Limit the number of responses to return
      required: false
      default: 25
      schema:
        $ref: '#/components/schemas/LimitParam'
    CheckpointID:
      name: checkpoint_id
      in: path
      description: Checkpoint ID
      required: true
      schema:
        $ref: '#/components/schemas/Checkpoint'
    RiderId:
      name: rider_id
      in: path
      description: Rider ID
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  schemas:
    RiderId:
      type: integer
      description: Id number of rider
    RemoveTracker:
      type: object
      properties:
        trackerId:
          $ref: '#/components/schemas/Id'
        depositToBeReturned:
          $ref: '#/components/schemas/DepositAmount'
    AssignTracker:
      type: object
      properties:
        trackerId:
          $ref: '#/components/schemas/Id'
        depositPaid:
          $ref: '#/components/schemas/DepositAmount'
    Trackers:
      type: object
      properties:
        trackers:
          $ref: '#/components/schemas/TrackerList'
        next:
          $ref: '#/components/schemas/Next'
    TrackerList:
      type: array
      items:
        $ref: '#/components/schemas/Tracker'
    PostTracker:
      type: object
      properties:
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
        loanStatus:
          $ref: '#/components/schemas/LoanStatus'
        lastTestDate:
          $ref: '#/components/schemas/timestamp'
        purchaseDate:
          $ref: '#/components/schemas/timestamp'
        warrantyExpiry:
          $ref: '#/components/schemas/timestamp'
        owner:
          $ref: '#/components/schemas/Owner'
    Tracker:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
        loanStatus:
          $ref: '#/components/schemas/LoanStatus'
        depositAmount:
          $ref: '#/components/schemas/DepositAmount'
        depositStatus:
          $ref: '#/components/schemas/DepositStatus'
        lastTestDate:
          $ref: '#/components/schemas/timestamp'
        purchaseDate:
          $ref: '#/components/schemas/timestamp'
        warrantyExpiry:
          $ref: '#/components/schemas/timestamp'
        owner:
          $ref: '#/components/schemas/Owner'
    Owner:
      type: string
      enum:
        - lostDot
        - riderOwned
        - thirdParty
    LimitParam:
      type: integer
      example: 5
    PatchRider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
    CapNumber:
      type: integer
      description: Cap number of rider
      example: 171
    PostRider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
    PostPatchRiderResponse:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        id:
          $ref: '#/components/schemas/Id'
    Riders:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/Next'
        riders:
          $ref: '#/components/schemas/RiderList'
    Next:
      type: string
      description: URL for next response, with same number of objects as current response
      example: '/riders?id=51&limit=50'
    RiderList:
      type: array
      items:
        $ref: '#/components/schemas/Rider'
    Rider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        id:
          $ref: '#/components/schemas/Id'
        capNumber:
          $ref: '#/components/schemas/CapNumber'
        trackers:
          $ref: '#/components/schemas/RiderTrackerList'
        depositBalance:
          $ref: '#/components/schemas/DepositBalance'
        checkpoints:
          $ref: '#/components/schemas/CheckpointList'
    CheckpointList:
      type: array
      items:
        $ref: '#/components/schemas/CheckpointSeen'
    CheckpointArrival:
      type: object
      properties:
        checkPoint:
          $ref: '#/components/schemas/Checkpoint'
        time:
          $ref: '#/components/schemas/timestamp'
    CheckpointSeen:
      type: object
      properties:
        checkPoint:
          $ref: '#/components/schemas/Checkpoint'
        timeSeen:
          $ref: '#/components/schemas/dateTime'
    Checkpoint:
      type: integer
      example: 1
    dateTime:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/timestamp'
        timeReadable:
          $ref: '#/components/schemas/timeReadable'
    RiderTrackerList:
      type: array
      items:
        $ref: '#/components/schemas/RiderTracker'
    RiderTracker:
      type: object
      properties:
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        id:
          $ref: '#/components/schemas/Id'
        depositAmount:
          $ref: '#/components/schemas/DepositAmount'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
    Id:
      type: integer
      description: Id number for various resources. Starting from 0, +1 iteration
      example: 142
    ESNNumber:
      type: string
      example: 123456789
    DepositBalance:
      description: Total amount owed to or from rider. If negative, rider is owed money - if positive, rider owes money
      type: float
      example: 200.4
    DepositStatus:
      description: Status of deposit
      type: string
      enum:
        - not_yet_paid
        - paid
        - to_be_refunded
        - deposit_kept
        - refunded
    DepositAmount:
      description: Money to be assigned to a tracker
      type: float
      example: 200.4
    LoanStatus:
      type: string
      enum:
        - with_rider
        - not_loaned
        - other
    WorkingStatus:
      type: string
      enum:
        - working
        - broken
        - unknown
    timestamp:
      type: integer
      description: Unix Epoch timestamp
    timeReadable:
      type: string
      description: ISO Format Date Time string
      example: '2018-01-03T23:00:15'
    FirstName:
      type: string
      description: First name of rider
      example: Graham
    LastName:
      type: string
      description: Last name of rider
      example: Dodds
    Email:
      type: string
      example: hello@email.com

