openapi: 3.0.0
info:
  description: API documentation for the Track the Thing, a simple application to enable long distance bike races to
    better manage GPS tracker stock. <br>
    It has been developed by Oli M-C and Ben Kirby to support races held by Lost Dot.
  version: 0.0.1
  title: Track the thing
  contact:
    email: hello@olimc.co.uk
  #license: #todo Research and add license
    #name: "TBA"
    #url: ""
#host: "TBA"
#basePath: "TBA"
externalDocs:
  description:
  url:
tags:
- name: riders
  description: Operations concerning riders
- name: trackers
  description: Operations concerning trackers
- name: races
  description: Operations concernng races
paths:
  /riders:
    post:
      tags:
      - riders
      summary: Add a new rider
      description:
      operationId: addRider
      requestBody:
        description: Add a new rider
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRider'
      responses:
        200:
          description: Rider response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRiderResponse'
    get:
      tags:
        - riders
      summary: Get a list of riders
      operationId: getRiderList
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Race'
      responses:
        200:
          description: List of riders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderList'
  /riders/{rider_id}:
    get:
      tags:
        - riders
      summary: Retrive information about one rider
      responses:
        200:
          description: Rider response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rider'
    patch:
      tags:
        - riders
      summary: Change data about a rider
      operationId: patchRider
      parameters:
        - $ref: '#/components/parameters/RiderId'
      requestBody:
        description: Change information about one rider
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRider'
  /riders/{rider_id}/assignTracker:
    post:
      tags:
        - riders
  /riders/{rider_id}/removeTracker:
    post:
      tags:
        - riders
  /riders/{rider_id}/{race_id}/{checkpoint_id}/assignArrival:
    post:
      tags:
        - riders
        - races
  /riders/{rider_id}/assignRace:
    post:
      tags:
        - riders
        - races
  /races:
    get:
      tags:
        - races
  /races/{race_id}:
    get:
      tags:
        - races
    description: Retrive information about a race
    response:
      200:
        schema:
          $ref: '#/components/schemas/Races'
  /races/{race_id}/{checkpoint_id}:
    get:
      tags:
        - races
    description: See a list of riders who have passed through a checkpoint
    response:
      200:
  /races/{race_id}/riders:
    get:
      tags:
        - races
        - riders
    description: Retrive a list of all riders registered to a race
  /trackers:
    get:
      tags:
        - trackers
    post:
      tags:
        - trackers
  /trackers/{tracker_id}:
    get:
      tags:
        - trackers
    patch:
      tags:
        - trackers
components:
  parameters:
    Limit:
      name: limit
      in: query
      description: Limit the number of responses to return
      required: false
      default: 25
      schema:
        $ref: '#/components/schemas/LimitParam'
    Race:
      name: race
      in: query
      description: Limit the return of riders to one or more races
      schema:
        $ref: '#/components/schemas/RaceParam'
    RiderId:
      name: rider_id
      in: path
      description: Rider ID
      required: true
      schema:
        $ref: '#/components/schemas/RiderId'
  schemas:
    LimitParam:
      type: integer
      example: 5
    RaceParam:
      type: string
      example: TCR06
    PatchRider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
    PostRider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
          required: true
        lastName:
          $ref: '#/components/schemas/LastName'
          required: true
        email:
          $ref: '#/components/schemas/Email'
          required: true
    PostRiderResponse:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        id:
          $ref: '#/components/schemas/Id'
    RiderList:
      type: array
      items:
        $ref: '#/components/schemas/Rider'
    Rider:
      type:
        object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/lastName'
        email:
          $ref: '#/components/schemas/Email'
        id:
          $ref: '#/components/schemas/Id'
        trackers:
          $ref: '#/components/schemas/RiderTrackerList'
        totalDeposit:
          $ref: '#/components/schemas/DepositAmount'
        activeRace:
          $ref: '#/components/schemas/ActiveRace'
    ActiveRace:
      type: object
      properties:
        raceCode:
          $ref: '#/components/schemas/RaceCode'
        checkPoints:
          $ref: '#/components/schemas/CheckPointList'
    CheckPointList:
      type: array
      items:
        $ref: '#/components/schemas/CheckPointSeen'
    CheckPointSeen:
      type: object
      properties:
        checkPoint:
          $ref: '#/components/schemas/checkPoint'
        timeSeen:
          $ref: '#/components/schemas/dateTime'
    checkPoint:
      type: string
      example: CP2
    dateTime:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/timestamp'
        timeReadable:
          $ref: '#/components/schemas/timeReadable'
    RiderTrackerList:
      type: array
      items:
        $ref: '#/components/schemas/RiderTracker'
    RiderTracker:
      type: object
      properties:
        esnNumber:
          $ref: '#/components/schemas/ESNNumber'
        id:
          $ref: '#/components/schemas/Id'
        depositAmount:
          $ref: '#/components/schemas/DepositAmount'
        workingStatus:
          $ref: '#/components/schemas/WorkingStatus'
    Id:
      type: integer
      example: 142
    ESNNumber:
      type: string
      example: 123456789
    DepositAmount:
      type: float
      example: 200.4
    WorkingStatus:
      type: string
      enum:
        - working
        - broken
        - unknown
    Races:
      type: array
      items:
        type: object
        schema:
          $ref: '#/components/schemas/Race'
    Race:
      type: object
      properties:
        dateStart:
          schema:
            $ref: '#/components/schemas/dateTime'
        dateEnd:
          schema:
            $ref: '#/components/schemas/dateTime'
        name:
          schema:
            $ref: '#/components/schemas/RaceName'
        code:
          schema:
            $ref: '#/components/schemas/RaceCode'
    RaceCode:
      type: string
      description: Code for Race
      example: TCR06
    timestamp:
      type: integer
      description: Unix Epoch timestamp
    timeReadable:
      type: string
      description: ISO Format Date Time string
      example: '2018-01-03T23:00:15'
    RaceName:
      type: string
      description: Name of Race
      example: Transcontinental no. 6
    FirstName:
      type: string
      description: First name of rider
      example: Graham
    LastName:
      type: string
      description: Last name of rider
      example: Dodds
    Email:
      type: string
      example: hello@email.com

